{"version":3,"sources":["useLinkTo.tsx"],"names":["React","getStateFromPath","getActionFromState","NavigationContext","LinkingContext","useLinkTo","navigation","useContext","linking","linkTo","useCallback","to","undefined","Error","root","current","getParent","navigate","screen","params","startsWith","options","state","config","action","dispatch","reset"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,gBADF,EAEEC,kBAFF,EAGEC,iBAHF,QAIO,wBAJP;AAKA,OAAOC,cAAP,MAA2B,kBAA3B;AAiBA,eAAe,SAASC,SAAT,GAEX;AACF,QAAMC,UAAU,GAAGN,KAAK,CAACO,UAAN,CAAiBJ,iBAAjB,CAAnB;AACA,QAAMK,OAAO,GAAGR,KAAK,CAACO,UAAN,CAAiBH,cAAjB,CAAhB;AAEA,QAAMK,MAAM,GAAGT,KAAK,CAACU,WAAN,CACZC,EAAD,IAAuB;AACrB,QAAIL,UAAU,KAAKM,SAAnB,EAA8B;AAC5B,YAAM,IAAIC,KAAJ,CACJ,sFADI,CAAN;AAGD;;AAED,QAAIC,IAAI,GAAGR,UAAX;AACA,QAAIS,OAAJ,CARqB,CAUrB;;AACA,WAAQA,OAAO,GAAGD,IAAI,CAACE,SAAL,EAAlB,EAAqC;AACnCF,MAAAA,IAAI,GAAGC,OAAP;AACD;;AAED,QAAI,OAAOJ,EAAP,KAAc,QAAlB,EAA4B;AAC1B;AACAG,MAAAA,IAAI,CAACG,QAAL,CAAcN,EAAE,CAACO,MAAjB,EAAyBP,EAAE,CAACQ,MAA5B;AACA;AACD;;AAED,QAAI,CAACR,EAAE,CAACS,UAAH,CAAc,GAAd,CAAL,EAAyB;AACvB,YAAM,IAAIP,KAAJ,CAAW,iCAAgCF,EAAG,IAA9C,CAAN;AACD;;AAED,UAAM;AAAEU,MAAAA;AAAF,QAAcb,OAApB;AAEA,UAAMc,KAAK,GAAGD,OAAO,SAAP,IAAAA,OAAO,WAAP,IAAAA,OAAO,CAAEpB,gBAAT,GACVoB,OAAO,CAACpB,gBAAR,CAAyBU,EAAzB,EAA6BU,OAAO,CAACE,MAArC,CADU,GAEVtB,gBAAgB,CAACU,EAAD,EAAKU,OAAL,aAAKA,OAAL,uBAAKA,OAAO,CAAEE,MAAd,CAFpB;;AAIA,QAAID,KAAJ,EAAW;AACT,YAAME,MAAM,GAAGtB,kBAAkB,CAACoB,KAAD,EAAQD,OAAR,aAAQA,OAAR,uBAAQA,OAAO,CAAEE,MAAjB,CAAjC;;AAEA,UAAIC,MAAM,KAAKZ,SAAf,EAA0B;AACxBE,QAAAA,IAAI,CAACW,QAAL,CAAcD,MAAd;AACD,OAFD,MAEO;AACLV,QAAAA,IAAI,CAACY,KAAL,CAAWJ,KAAX;AACD;AACF,KARD,MAQO;AACL,YAAM,IAAIT,KAAJ,CAAU,iDAAV,CAAN;AACD;AACF,GA3CY,EA4Cb,CAACL,OAAD,EAAUF,UAAV,CA5Ca,CAAf;AA+CA,SAAOG,MAAP;AACD","sourcesContent":["import * as React from 'react';\nimport {\n  getStateFromPath,\n  getActionFromState,\n  NavigationContext,\n} from '@react-navigation/core';\nimport LinkingContext from './LinkingContext';\n\nexport type To<\n  ParamList extends ReactNavigation.RootParamList = ReactNavigation.RootParamList,\n  RouteName extends keyof ParamList = keyof ParamList\n> =\n  | string\n  | (undefined extends ParamList[RouteName]\n      ? {\n          screen: RouteName;\n          params?: ParamList[RouteName];\n        }\n      : {\n          screen: RouteName;\n          params: ParamList[RouteName];\n        });\n\nexport default function useLinkTo<\n  ParamList extends ReactNavigation.RootParamList\n>() {\n  const navigation = React.useContext(NavigationContext);\n  const linking = React.useContext(LinkingContext);\n\n  const linkTo = React.useCallback(\n    (to: To<ParamList>) => {\n      if (navigation === undefined) {\n        throw new Error(\n          \"Couldn't find a navigation object. Is your component inside a screen in a navigator?\"\n        );\n      }\n\n      let root = navigation;\n      let current;\n\n      // Traverse up to get the root navigation\n      while ((current = root.getParent())) {\n        root = current;\n      }\n\n      if (typeof to !== 'string') {\n        // @ts-expect-error: This is fine\n        root.navigate(to.screen, to.params);\n        return;\n      }\n\n      if (!to.startsWith('/')) {\n        throw new Error(`The path must start with '/' (${to}).`);\n      }\n\n      const { options } = linking;\n\n      const state = options?.getStateFromPath\n        ? options.getStateFromPath(to, options.config)\n        : getStateFromPath(to, options?.config);\n\n      if (state) {\n        const action = getActionFromState(state, options?.config);\n\n        if (action !== undefined) {\n          root.dispatch(action);\n        } else {\n          root.reset(state);\n        }\n      } else {\n        throw new Error('Failed to parse the path to a navigation state.');\n      }\n    },\n    [linking, navigation]\n  );\n\n  return linkTo;\n}\n"]}
{"version":3,"sources":["NavigationContainer.tsx"],"names":["NavigationContainerInner","theme","DefaultTheme","linking","fallback","documentTitle","onReady","rest","ref","isLinkingEnabled","enabled","refContainer","React","useRef","getInitialState","prefixes","useEffect","current","Object","defineProperty","get","getStateFromPath","getPathFromState","getActionFromState","enumerable","isResolved","initialState","useImperativeHandle","linkingContext","useMemo","options","isReady","onReadyRef","NavigationContainer","forwardRef"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  BaseNavigationContainer,\n  getPathFromState,\n  getStateFromPath,\n  getActionFromState,\n  NavigationContainerProps,\n  NavigationContainerRef,\n  ParamListBase,\n} from '@react-navigation/core';\nimport ThemeProvider from './theming/ThemeProvider';\nimport DefaultTheme from './theming/DefaultTheme';\nimport LinkingContext from './LinkingContext';\nimport useThenable from './useThenable';\nimport useLinking from './useLinking';\nimport useDocumentTitle from './useDocumentTitle';\nimport useBackButton from './useBackButton';\nimport type { Theme, LinkingOptions, DocumentTitleOptions } from './types';\n\ntype Props<ParamList extends {}> = NavigationContainerProps & {\n  theme?: Theme;\n  linking?: LinkingOptions<ParamList>;\n  fallback?: React.ReactNode;\n  documentTitle?: DocumentTitleOptions;\n  onReady?: () => void;\n};\n\n/**\n * Container component which holds the navigation state designed for React Native apps.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree. When deep link handling is enabled, this will override deep links when specified. Make sure that you don't specify an `initialState` when there's a deep link (`Linking.getInitialURL()`).\n * @param props.onReady Callback which is called after the navigation tree mounts.\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.theme Theme object for the navigators.\n * @param props.linking Options for deep linking. Deep link handling is enabled when this prop is provided, unless `linking.enabled` is `false`.\n * @param props.fallback Fallback component to render until we have finished getting initial state when linking is enabled. Defaults to `null`.\n * @param props.documentTitle Options to configure the document title on Web. Updating document title is handled by default unless `documentTitle.enabled` is `false`.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\nfunction NavigationContainerInner(\n  {\n    theme = DefaultTheme,\n    linking,\n    fallback = null,\n    documentTitle,\n    onReady,\n    ...rest\n  }: Props<ParamListBase>,\n  ref?: React.Ref<NavigationContainerRef<ParamListBase> | null>\n) {\n  const isLinkingEnabled = linking ? linking.enabled !== false : false;\n\n  const refContainer = React.useRef<NavigationContainerRef<ParamListBase>>(\n    null\n  );\n\n  useBackButton(refContainer);\n  useDocumentTitle(refContainer, documentTitle);\n\n  const { getInitialState } = useLinking(refContainer, {\n    enabled: isLinkingEnabled,\n    prefixes: [],\n    ...linking,\n  });\n\n  // Add additional linking related info to the ref\n  // This will be used by the devtools\n  React.useEffect(() => {\n    if (refContainer.current) {\n      Object.defineProperty(refContainer.current, '__linking', {\n        get() {\n          return {\n            ...linking,\n            enabled: isLinkingEnabled,\n            prefixes: linking?.prefixes ?? [],\n            getStateFromPath: linking?.getStateFromPath ?? getStateFromPath,\n            getPathFromState: linking?.getPathFromState ?? getPathFromState,\n            getActionFromState:\n              linking?.getActionFromState ?? getActionFromState,\n          };\n        },\n        enumerable: false,\n      });\n    }\n  });\n\n  const [isResolved, initialState] = useThenable(getInitialState);\n\n  React.useImperativeHandle(ref, () => refContainer.current);\n\n  const linkingContext = React.useMemo(() => ({ options: linking }), [linking]);\n\n  const isReady = rest.initialState != null || !isLinkingEnabled || isResolved;\n\n  const onReadyRef = React.useRef(onReady);\n\n  React.useEffect(() => {\n    onReadyRef.current = onReady;\n  });\n\n  React.useEffect(() => {\n    if (isReady) {\n      onReadyRef.current?.();\n    }\n  }, [isReady]);\n\n  if (!isReady) {\n    // This is temporary until we have Suspense for data-fetching\n    // Then the fallback will be handled by a parent `Suspense` component\n    return fallback as React.ReactElement;\n  }\n\n  return (\n    <LinkingContext.Provider value={linkingContext}>\n      <ThemeProvider value={theme}>\n        <BaseNavigationContainer\n          {...rest}\n          initialState={\n            rest.initialState == null ? initialState : rest.initialState\n          }\n          ref={refContainer}\n        />\n      </ThemeProvider>\n    </LinkingContext.Provider>\n  );\n}\n\nconst NavigationContainer = React.forwardRef(NavigationContainerInner) as <\n  RootParamList extends {} = ReactNavigation.RootParamList\n>(\n  props: Props<RootParamList> & {\n    ref?: React.Ref<NavigationContainerRef<RootParamList>>;\n  }\n) => React.ReactElement;\n\nexport default NavigationContainer;\n"]}
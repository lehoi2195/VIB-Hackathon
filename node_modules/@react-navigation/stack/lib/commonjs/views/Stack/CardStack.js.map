{"version":3,"sources":["CardStack.tsx"],"names":["EPSILON","STATE_INACTIVE","STATE_TRANSITIONING_OR_BELOW_TOP","STATE_ON_TOP","FALLBACK_DESCRIPTOR","Object","freeze","options","getHeaderHeights","routes","insets","isParentHeaderShown","descriptors","layout","previous","reduce","acc","curr","key","style","StyleSheet","flatten","headerStyle","height","headerStatusBarHeight","top","getDistanceFromOptions","descriptor","presentation","gestureDirection","ModalTransition","DefaultTransition","getProgressFromGesture","gesture","distance","width","Math","max","interpolate","inputRange","outputRange","CardStack","React","Component","getDerivedStateFromProps","props","state","gestures","animationEnabled","Animated","Value","openingRouteKeys","includes","scenes","map","route","index","self","previousRoute","nextRoute","oldScene","currentGesture","previousGesture","undefined","nextGesture","nextDescriptor","previousDescriptor","optionsForTransitionConfig","length","defaultTransitionPreset","Platform","OS","gestureEnabled","transitionSpec","cardStyleInterpolator","forNoAnimationCard","headerStyleInterpolator","cardOverlayEnabled","forModalPresentationIOS","headerMode","header","scene","progress","current","next","__memo","every","it","i","headerHeights","constructor","e","nativeEvent","setState","previousHeight","getPreviousRoute","previousScene","find","SafeAreaProviderCompat","initialMetrics","frame","render","closingRouteKeys","onOpenRoute","onCloseRoute","renderHeader","renderScene","onTransitionStart","onTransitionEnd","onGestureStart","onGestureEnd","onGestureCancel","detachInactiveScreens","focusedRoute","focusedHeaderHeight","isFloatHeaderAbsolute","slice","some","headerTransparent","headerShown","activeScreensLimit","detachPreviousScreen","floatingHeader","mode","getPreviousScene","getFocusedRoute","onContentHeightChange","handleHeaderLayout","styles","floating","absolute","container","handleLayout","focused","isScreenActive","sceneForActivity","outputValue","extrapolate","headerTintColor","safeAreaInsetTop","safeAreaInsetRight","right","safeAreaInsetBottom","bottom","safeAreaInsetLeft","left","headerHeight","backgroundColor","headerBackgroundColor","headerDarkContent","isDark","interpolationIndex","cardStyleInterpolatorCurrent","absoluteFill","create","flex","position","zIndex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  LayoutChangeEvent,\n  Platform,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\nimport Color from 'color';\nimport type {\n  ParamListBase,\n  Route,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport {\n  getDefaultHeaderHeight,\n  SafeAreaProviderCompat,\n  Background,\n} from '@react-navigation/elements';\n\nimport { MaybeScreenContainer, MaybeScreen } from '../Screens';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport CardContainer from './CardContainer';\nimport {\n  DefaultTransition,\n  ModalTransition,\n} from '../../TransitionConfigs/TransitionPresets';\nimport {\n  forModalPresentationIOS,\n  forNoAnimation as forNoAnimationCard,\n} from '../../TransitionConfigs/CardStyleInterpolators';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport type {\n  Layout,\n  Scene,\n  StackDescriptor,\n  StackDescriptorMap,\n  StackHeaderMode,\n  StackNavigationOptions,\n} from '../../types';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  insets: EdgeInsets;\n  state: StackNavigationState<ParamListBase>;\n  descriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  isParentHeaderShown: boolean;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onGestureStart?: (props: { route: Route<string> }) => void;\n  onGestureEnd?: (props: { route: Route<string> }) => void;\n  onGestureCancel?: (props: { route: Route<string> }) => void;\n  detachInactiveScreens?: boolean;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst EPSILON = 0.01;\n\nconst STATE_INACTIVE = 0;\nconst STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nconst STATE_ON_TOP = 2;\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getHeaderHeights = (\n  routes: Route<string>[],\n  insets: EdgeInsets,\n  isParentHeaderShown: boolean,\n  descriptors: StackDescriptorMap,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return routes.reduce<Record<string, number>>((acc, curr) => {\n    const { options = {} } = descriptors[curr.key] || {};\n    const style: any = StyleSheet.flatten(options.headerStyle || {});\n\n    const height =\n      typeof style.height === 'number' ? style.height : previous[curr.key];\n\n    const {\n      headerStatusBarHeight = isParentHeaderShown ? 0 : insets.top,\n    } = options;\n\n    acc[curr.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const {\n    presentation,\n    gestureDirection = presentation === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection,\n  } = (descriptor?.options || {}) as StackNavigationOptions;\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const distance = getDistanceFromOptions(\n    {\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n      // This causes blank screen on web if it was previously inside container with display: none\n      width: Math.max(1, layout.width),\n      height: Math.max(1, layout.height),\n    },\n    descriptor\n  );\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport default class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Props,\n    state: State\n  ): Partial<State> | null {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const { animationEnabled } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          props.openingRouteKeys.includes(curr.key) &&\n          animationEnabled !== false\n            ? getDistanceFromOptions(state.layout, descriptor)\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    return {\n      routes: props.routes,\n      scenes: props.routes.map((route, index, self) => {\n        const previousRoute = self[index - 1];\n        const nextRoute = self[index + 1];\n\n        const oldScene = state.scenes[index];\n\n        const currentGesture = gestures[route.key];\n        const previousGesture = previousRoute\n          ? gestures[previousRoute.key]\n          : undefined;\n        const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n        const descriptor =\n          props.descriptors[route.key] ||\n          state.descriptors[route.key] ||\n          (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n        const nextDescriptor =\n          props.descriptors[nextRoute?.key] ||\n          state.descriptors[nextRoute?.key];\n\n        const previousDescriptor =\n          props.descriptors[previousRoute?.key] ||\n          state.descriptors[previousRoute?.key];\n\n        // When a screen is not the last, it should use next screen's transition config\n        // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n        // For example combining a slide and a modal transition would look wrong otherwise\n        // With this approach, combining different transition styles in the same navigator mostly looks right\n        // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n        // but majority of the transitions look alright\n        const optionsForTransitionConfig =\n          index !== self.length - 1 && nextDescriptor\n            ? nextDescriptor.options\n            : descriptor.options;\n\n        let defaultTransitionPreset =\n          optionsForTransitionConfig.presentation === 'modal'\n            ? ModalTransition\n            : DefaultTransition;\n\n        const {\n          animationEnabled = Platform.OS !== 'web' &&\n            Platform.OS !== 'windows' &&\n            Platform.OS !== 'macos',\n          gestureEnabled = Platform.OS === 'ios' && animationEnabled,\n          gestureDirection = defaultTransitionPreset.gestureDirection,\n          transitionSpec = defaultTransitionPreset.transitionSpec,\n          cardStyleInterpolator = animationEnabled === false\n            ? forNoAnimationCard\n            : defaultTransitionPreset.cardStyleInterpolator,\n          headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n          cardOverlayEnabled = Platform.OS !== 'ios' ||\n            cardStyleInterpolator === forModalPresentationIOS,\n        } = optionsForTransitionConfig;\n\n        const headerMode: StackHeaderMode =\n          descriptor.options.headerMode ??\n          (!(\n            optionsForTransitionConfig.presentation === 'modal' ||\n            cardStyleInterpolator === forModalPresentationIOS\n          ) &&\n          Platform.OS === 'ios' &&\n          descriptor.options.header === undefined\n            ? 'float'\n            : 'screen');\n\n        const scene = {\n          route,\n          descriptor: {\n            ...descriptor,\n            options: {\n              ...descriptor.options,\n              animationEnabled,\n              cardOverlayEnabled,\n              cardStyleInterpolator,\n              gestureDirection,\n              gestureEnabled,\n              headerStyleInterpolator,\n              transitionSpec,\n              headerMode,\n            },\n          },\n          progress: {\n            current: getProgressFromGesture(\n              currentGesture,\n              state.layout,\n              descriptor\n            ),\n            next: nextGesture\n              ? getProgressFromGesture(\n                  nextGesture,\n                  state.layout,\n                  nextDescriptor\n                )\n              : undefined,\n            previous: previousGesture\n              ? getProgressFromGesture(\n                  previousGesture,\n                  state.layout,\n                  previousDescriptor\n                )\n              : undefined,\n          },\n          __memo: [\n            state.layout,\n            descriptor,\n            nextDescriptor,\n            previousDescriptor,\n            currentGesture,\n            nextGesture,\n            previousGesture,\n          ],\n        };\n\n        if (\n          oldScene &&\n          scene.__memo.every((it, i) => {\n            // @ts-expect-error: we haven't added __memo to the annotation to prevent usage elsewhere\n            return oldScene.__memo[i] === it;\n          })\n        ) {\n          return oldScene;\n        }\n\n        return scene;\n      }),\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        props.routes,\n        props.insets,\n        props.isParentHeaderShown,\n        state.descriptors,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: SafeAreaProviderCompat.initialMetrics.frame,\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {},\n    };\n  }\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          props.routes,\n          props.insets,\n          props.isParentHeaderShown,\n          state.descriptors,\n          layout,\n          state.headerHeights\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  private getPreviousScene = ({ route }: { route: Route<string> }) => {\n    const { getPreviousRoute } = this.props;\n    const { scenes } = this.state;\n\n    const previousRoute = getPreviousRoute({ route });\n\n    if (previousRoute) {\n      const previousScene = scenes.find(\n        (scene) => scene.descriptor.route.key === previousRoute.key\n      );\n\n      return previousScene;\n    }\n\n    return undefined;\n  };\n\n  render() {\n    const {\n      insets,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      renderHeader,\n      renderScene,\n      isParentHeaderShown,\n      onTransitionStart,\n      onTransitionEnd,\n      onGestureStart,\n      onGestureEnd,\n      onGestureCancel,\n      detachInactiveScreens = Platform.OS === 'web' ||\n        Platform.OS === 'android' ||\n        Platform.OS === 'ios',\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedHeaderHeight = headerHeights[focusedRoute.key];\n\n    const isFloatHeaderAbsolute = this.state.scenes.slice(-2).some((scene) => {\n      const options = scene.descriptor.options ?? {};\n      const { headerMode, headerTransparent, headerShown = true } = options;\n\n      if (\n        headerTransparent ||\n        headerShown === false ||\n        headerMode === 'screen'\n      ) {\n        return true;\n      }\n\n      return false;\n    });\n\n    let activeScreensLimit = 1;\n\n    for (let i = scenes.length - 1; i >= 0; i--) {\n      const { options } = scenes[i].descriptor;\n      const {\n        // By default, we don't want to detach the previous screen of the active one for modals\n        detachPreviousScreen = options.presentation === 'modal' ||\n        options.cardStyleInterpolator === forModalPresentationIOS\n          ? i !== scenes.length - 1\n          : true,\n      } = options;\n\n      if (detachPreviousScreen === false) {\n        activeScreensLimit++;\n      } else {\n        break;\n      }\n    }\n\n    const floatingHeader = (\n      <React.Fragment key=\"header\">\n        {renderHeader({\n          mode: 'float',\n          layout,\n          scenes,\n          getPreviousScene: this.getPreviousScene,\n          getFocusedRoute: this.getFocusedRoute,\n          onContentHeightChange: this.handleHeaderLayout,\n          style: [\n            styles.floating,\n            isFloatHeaderAbsolute && [\n              // Without this, the header buttons won't be touchable on Android when headerTransparent: true\n              { height: focusedHeaderHeight },\n              styles.absolute,\n            ],\n          ],\n        })}\n      </React.Fragment>\n    );\n\n    return (\n      <Background>\n        {isFloatHeaderAbsolute ? null : floatingHeader}\n        <MaybeScreenContainer\n          enabled={detachInactiveScreens}\n          style={styles.container}\n          onLayout={this.handleLayout}\n        >\n          {routes.map((route, index, self) => {\n            const focused = focusedRoute.key === route.key;\n            const gesture = gestures[route.key];\n            const scene = scenes[index];\n\n            // For the screens that shouldn't be active, the value is 0\n            // For those that should be active, but are not the top screen, the value is 1\n            // For those on top of the stack and with interaction enabled, the value is 2\n            // For the old implementation, it stays the same it was\n            let isScreenActive: Animated.AnimatedInterpolation | 2 | 1 | 0 = 1;\n\n            if (index < self.length - activeScreensLimit - 1) {\n              // screen should be inactive because it is too deep in the stack\n              isScreenActive = STATE_INACTIVE;\n            } else {\n              const sceneForActivity = scenes[self.length - 1];\n              const outputValue =\n                index === self.length - 1\n                  ? STATE_ON_TOP // the screen is on top after the transition\n                  : index >= self.length - activeScreensLimit\n                  ? STATE_TRANSITIONING_OR_BELOW_TOP // the screen should stay active after the transition, it is not on top but is in activeLimit\n                  : STATE_INACTIVE; // the screen should be active only during the transition, it is at the edge of activeLimit\n              isScreenActive = sceneForActivity\n                ? sceneForActivity.progress.current.interpolate({\n                    inputRange: [0, 1 - EPSILON, 1],\n                    outputRange: [1, 1, outputValue],\n                    extrapolate: 'clamp',\n                  })\n                : STATE_TRANSITIONING_OR_BELOW_TOP;\n            }\n\n            const {\n              cardStyleInterpolator,\n              headerShown = true,\n              headerTransparent,\n              headerStyle,\n              headerTintColor,\n            } = scene.descriptor.options;\n\n            const safeAreaInsetTop = insets.top;\n            const safeAreaInsetRight = insets.right;\n            const safeAreaInsetBottom = insets.bottom;\n            const safeAreaInsetLeft = insets.left;\n\n            const headerHeight =\n              headerShown !== false ? headerHeights[route.key] : 0;\n\n            const { backgroundColor: headerBackgroundColor } =\n              StyleSheet.flatten(headerStyle) || {};\n\n            let headerDarkContent: boolean | undefined;\n\n            if (headerShown) {\n              if (headerTintColor) {\n                headerDarkContent = Color(headerTintColor).isDark();\n              } else if (typeof headerBackgroundColor === 'string') {\n                headerDarkContent = !Color(headerBackgroundColor).isDark();\n              }\n            }\n\n            // Start from current card and count backwards the number of cards with same interpolation\n            let interpolationIndex = 0;\n\n            for (let i = index - 1; i >= 0; i--) {\n              const cardStyleInterpolatorCurrent =\n                scenes[i]?.descriptor.options.cardStyleInterpolator;\n\n              if (cardStyleInterpolatorCurrent !== cardStyleInterpolator) {\n                break;\n              }\n\n              interpolationIndex++;\n            }\n\n            return (\n              <MaybeScreen\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                enabled={detachInactiveScreens}\n                active={isScreenActive}\n                pointerEvents=\"box-none\"\n              >\n                <CardContainer\n                  index={index}\n                  interpolationIndex={interpolationIndex}\n                  active={index === self.length - 1}\n                  focused={focused}\n                  closing={closingRouteKeys.includes(route.key)}\n                  layout={layout}\n                  gesture={gesture}\n                  scene={scene}\n                  safeAreaInsetTop={safeAreaInsetTop}\n                  safeAreaInsetRight={safeAreaInsetRight}\n                  safeAreaInsetBottom={safeAreaInsetBottom}\n                  safeAreaInsetLeft={safeAreaInsetLeft}\n                  onGestureStart={onGestureStart}\n                  onGestureCancel={onGestureCancel}\n                  onGestureEnd={onGestureEnd}\n                  headerHeight={headerHeight}\n                  isParentHeaderShown={isParentHeaderShown}\n                  onHeaderHeightChange={this.handleHeaderLayout}\n                  getPreviousScene={this.getPreviousScene}\n                  getFocusedRoute={this.getFocusedRoute}\n                  headerDarkContent={headerDarkContent}\n                  hasAbsoluteFloatHeader={\n                    isFloatHeaderAbsolute && !headerTransparent\n                  }\n                  renderHeader={renderHeader}\n                  renderScene={renderScene}\n                  onOpenRoute={onOpenRoute}\n                  onCloseRoute={onCloseRoute}\n                  onTransitionStart={onTransitionStart}\n                  onTransitionEnd={onTransitionEnd}\n                />\n              </MaybeScreen>\n            );\n          })}\n        </MaybeScreenContainer>\n        {isFloatHeaderAbsolute ? floatingHeader : null}\n      </Background>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n  floating: {\n    zIndex: 1,\n  },\n});\n"]}